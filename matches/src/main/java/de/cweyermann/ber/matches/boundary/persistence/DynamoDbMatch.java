package de.cweyermann.ber.matches.boundary.persistence;

import java.util.List;

import com.amazonaws.services.dynamodbv2.datamodeling.DynamoDBAutoGeneratedKey;
import com.amazonaws.services.dynamodbv2.datamodeling.DynamoDBHashKey;
import com.amazonaws.services.dynamodbv2.datamodeling.DynamoDBTable;
import com.amazonaws.services.dynamodbv2.datamodeling.DynamoDBTyped;
import com.amazonaws.services.dynamodbv2.datamodeling.DynamoDBMapperFieldModel.DynamoDBAttributeType;

import de.cweyermann.ber.matches.entity.Match;
import lombok.Data;
import lombok.EqualsAndHashCode;
import lombok.ToString;

@DynamoDBTable(tableName = "Matches")
@Data
@ToString
public class DynamoDbMatch {

    @DynamoDBTyped(DynamoDBAttributeType.S)
    public enum Status {
        RATED, DOING, UNRATED
    }

    @DynamoDBHashKey
    private String id;

    private String player1Id;

    private String player2Id;

    private String player3Id;

    private String player4Id;

    private List<DynamoDbPlayer> homePlayers;

    private List<DynamoDbPlayer> awayPlayers;

    private String league;

    private String hometeam;

    private String awayteam;

    private String discipline;

    private String result;

    private Status processStatus = Status.UNRATED;

    private String source;

    public void update() {
        if (homePlayers.size() == 1 && awayPlayers.size() == 1) {
            player1Id = homePlayers.get(0).getId();
            player2Id = awayPlayers.get(0).getId();
        }

        if (homePlayers.size() == 2 && awayPlayers.size() == 2) {
            player1Id = homePlayers.get(0).getId();
            player2Id = homePlayers.get(1).getId();
            player3Id = awayPlayers.get(0).getId();
            player4Id = awayPlayers.get(1).getId();
        }

        id = hashCode() + "";
    }
}
